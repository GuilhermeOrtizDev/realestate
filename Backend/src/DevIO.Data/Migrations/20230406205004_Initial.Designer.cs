// <auto-generated />
using System;
using DevIO.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevIO.Data.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    [Migration("20230406205004_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DevIO.Business.DTOs.AddressDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("complement");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("logradouro");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int")
                        .HasColumnName("neighborhood_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<int>("UFId")
                        .HasColumnType("int")
                        .HasColumnName("uf_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("UFId");

                    b.ToTable("adresses", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.CityDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("UFId")
                        .HasColumnType("int")
                        .HasColumnName("uf_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("UFId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.GalleryDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<bool>("Emphasis")
                        .HasColumnType("bit")
                        .HasColumnName("emphasis");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("file");

                    b.Property<int>("ImmobileId")
                        .HasColumnType("int")
                        .HasColumnName("immobile_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("ImmobileId");

                    b.ToTable("galleries", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.ImmobileDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("price");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("immobiles", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.NeighborhoodDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("neighborhoods", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.UFDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("ufs", (string)null);
                });

            modelBuilder.Entity("DevIO.Business.DTOs.AddressDTO", b =>
                {
                    b.HasOne("DevIO.Business.DTOs.CityDTO", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .IsRequired();

                    b.HasOne("DevIO.Business.DTOs.NeighborhoodDTO", "Neighborhood")
                        .WithMany("Address")
                        .HasForeignKey("NeighborhoodId")
                        .IsRequired();

                    b.HasOne("DevIO.Business.DTOs.UFDTO", "UF")
                        .WithMany("Address")
                        .HasForeignKey("UFId")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Neighborhood");

                    b.Navigation("UF");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.CityDTO", b =>
                {
                    b.HasOne("DevIO.Business.DTOs.UFDTO", "UF")
                        .WithMany("Cities")
                        .HasForeignKey("UFId")
                        .IsRequired();

                    b.Navigation("UF");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.GalleryDTO", b =>
                {
                    b.HasOne("DevIO.Business.DTOs.ImmobileDTO", "Immobile")
                        .WithMany("Gallery")
                        .HasForeignKey("ImmobileId")
                        .IsRequired();

                    b.Navigation("Immobile");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.ImmobileDTO", b =>
                {
                    b.HasOne("DevIO.Business.DTOs.AddressDTO", "Address")
                        .WithOne("Immobile")
                        .HasForeignKey("DevIO.Business.DTOs.ImmobileDTO", "AddressId")
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.NeighborhoodDTO", b =>
                {
                    b.HasOne("DevIO.Business.DTOs.CityDTO", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.AddressDTO", b =>
                {
                    b.Navigation("Immobile")
                        .IsRequired();
                });

            modelBuilder.Entity("DevIO.Business.DTOs.CityDTO", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.ImmobileDTO", b =>
                {
                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.NeighborhoodDTO", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("DevIO.Business.DTOs.UFDTO", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
